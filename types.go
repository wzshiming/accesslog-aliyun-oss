package accesslog_aliyun_oss

import (
	"fmt"
	"net/url"

	"github.com/wzshiming/accesslog"
	"github.com/wzshiming/accesslog/unsafeutils"
)

// https://help.aliyun.com/zh/oss/user-guide/logging#section-akm-ndg-g5n
// RemoteIP Reserved Reserved Time "RequestURL" HTTPStatus SentBytes RequestTime "Referer" "UserAgent" "HostName" "RequestID" "LoggingFlag" "RequesterAliyunID" "Operation" "BucketName" "ObjectName" ObjectSize ServerCostTime "ErrorCode" RequestLength "UserID" DeltaDataSize "SyncRequest" "StorageClass" "TargetStorageClass" "TransmissionAccelerationAccessPoint" "AccessKeyID"
// 192.168.0.1 - - [03/Jan/2021:14:59:49 +0800] "GET /example.jpg HTTP/1.0" 200 999131 127 "http://www.aliyun.com/product/oss` `curl/7.15.5` `examplebucket.oss-cn-hangzhou.aliyuncs.com` `5FF16B65F05BC932307A3C3C` `true` `16571836914537****` `GetObject` `examplebucket` `example.jpg" 999131 88 "-" 302 "16571836914537****" - "cdn` `standard` `-` `-` `LTAI4FrfJPUSoKm4JHb5****"

type AccessLog struct {
	// 请求者的IP地址。Requester's IP address.
	RemoteIP string
	// 保留字段，固定值为-。Reserved field, fixed value is "-".
	Reserved1 string
	// 保留字段，固定值为-。Reserved field, fixed value is "-".
	Reserved2 string
	// OSS收到请求的时间。Time when OSS received the request.
	Time string
	// 包含query string的请求URL。Request URL including query string.
	RequestURL string
	// OSS返回的HTTP状态码。HTTP status code returned by OSS.
	HTTPStatus string
	// 请求产生的下行流量。单位：Byte。Downstream traffic generated by the request. Unit: Byte.
	SentBytes string
	// 完成本次请求耗费的时间。单位：ms。Time taken to complete the request. Unit: ms.
	RequestTime string
	// 请求的HTTP Referer。HTTP referer of the request.
	Referer string
	// HTTP的User-Agent头。HTTP User-Agent header.
	UserAgent string
	// 请求访问的目标域名。Target domain name of the request.
	HostName string
	// 请求的Request ID。Request ID of the request.
	RequestID string
	// 是否已开启日志转存。Indicates if log transfer is enabled.
	LoggingFlag string
	// 请求者的用户ID。Requester's user ID.
	RequesterAliyunID string
	// 请求类型。Type of request.
	Operation string
	// 请求的目标Bucket名称。Name of the target bucket.
	BucketName string
	// 请求的目标Object名称。Name of the target object.
	ObjectName string
	// 目标Object大小。单位：Byte。Size of the target object. Unit: Byte.
	ObjectSize string
	// OSS处理本次请求所花的时间。单位：毫秒。Time taken by OSS to process the request. Unit: ms.
	ServerCostTime string
	// OSS返回的错误码。Error code returned by OSS.
	ErrorCode string
	// 请求的长度。单位：Byte。Length of the request. Unit: Byte.
	RequestLength string
	// Bucket拥有者ID。Bucket owner's ID.
	UserID string
	// Object大小的变化量。Change in object size.
	DeltaDataSize string
	// 请求是否为CDN回源请求。Indicates if the request is a CDN back-to-origin request.
	SyncRequest string
	// 目标Object的存储类型。Storage type of the target object.
	StorageClass string
	// 是否通过生命周期规则或CopyObject转换了Object的存储类型。Indicates if the storage type of the object was changed via lifecycle rules or CopyObject.
	TargetStorageClass string
	// 通过传输加速域名访问目标Bucket时使用的传输加速接入点。Transmission acceleration access point used when accessing the target bucket via a transmission acceleration domain.
	TransmissionAccelerationAccessPoint string
	// 请求者的AccessKey ID。Requester's AccessKey ID.
	AccessKeyID string
}

func (a AccessLog) Formatted() (f AccessLogFormatted, err error) {
	f.RemoteIP = accesslog.CleanupString(a.RemoteIP)
	f.Time = accesslog.CleanupString(a.Time)

	req, err := accesslog.ParseRequest(a.RequestURL)
	if err != nil {
		return f, fmt.Errorf("failed to formatted request URL: %w", err)
	}
	f.RequestMethod = req.Method
	f.RequestScheme = req.URL.Scheme
	f.RequestHost = req.URL.Host
	f.RequestPath = req.URL.Path
	f.RequestQuery = req.URL.RawQuery
	f.RequestProto = req.Proto

	f.Status = accesslog.CleanupString(a.HTTPStatus)
	f.BodySentBytes = accesslog.CleanupString(a.SentBytes)
	f.RequestTime = accesslog.CleanupString(a.RequestTime)
	f.Referer = accesslog.CleanupString(a.Referer)
	f.UserAgent = accesslog.CleanupString(a.UserAgent)
	f.HostName = accesslog.CleanupString(a.HostName)
	f.RequestID = accesslog.CleanupString(a.RequestID)
	f.LoggingFlag = accesslog.CleanupString(a.LoggingFlag)
	f.RequesterAliyunID = accesslog.CleanupString(a.RequesterAliyunID)
	f.Operation = accesslog.CleanupString(a.Operation)
	f.BucketName = accesslog.CleanupString(a.BucketName)
	f.ObjectName = accesslog.CleanupString(a.ObjectName)
	on, err := url.PathUnescape(f.ObjectName)
	if err == nil {
		f.ObjectName = on
	}
	f.ObjectSize = accesslog.CleanupString(a.ObjectSize)
	f.ServerCostTime = accesslog.CleanupString(a.ServerCostTime)
	f.ErrorCode = accesslog.CleanupString(a.ErrorCode)
	f.RequestLength = accesslog.CleanupString(a.RequestLength)
	f.UserID = accesslog.CleanupString(a.UserID)
	f.DeltaDataSize = accesslog.CleanupString(a.DeltaDataSize)
	f.SyncRequest = accesslog.CleanupString(a.SyncRequest)
	f.StorageClass = accesslog.CleanupString(a.StorageClass)
	f.TargetStorageClass = accesslog.CleanupString(a.TargetStorageClass)
	f.TransmissionAccelerationAccessPoint = accesslog.CleanupString(a.TransmissionAccelerationAccessPoint)
	f.AccessKeyID = accesslog.CleanupString(a.AccessKeyID)
	return f, nil
}

type AccessLogFormatted struct {
	RemoteIP                            string
	Time                                string
	RequestMethod                       string
	RequestScheme                       string
	RequestHost                         string
	RequestPath                         string
	RequestQuery                        string
	RequestProto                        string
	Status                              string
	BodySentBytes                       string
	RequestTime                         string
	Referer                             string
	UserAgent                           string
	HostName                            string
	RequestID                           string
	LoggingFlag                         string
	RequesterAliyunID                   string
	Operation                           string
	BucketName                          string
	ObjectName                          string
	ObjectSize                          string
	ServerCostTime                      string
	ErrorCode                           string
	RequestLength                       string
	UserID                              string
	DeltaDataSize                       string
	SyncRequest                         string
	StorageClass                        string
	TargetStorageClass                  string
	TransmissionAccelerationAccessPoint string
	AccessKeyID                         string
}

func (AccessLogFormatted) Fields() []string {
	return unsafeutils.Fields[AccessLogFormatted]()
}

func (e AccessLogFormatted) Values(fields []string) []string {
	accessLogEntryFieldsIndexMapping := unsafeutils.FieldsOffset[AccessLogFormatted]()
	out := make([]string, len(fields))
	for i, f := range fields {
		offset, ok := accessLogEntryFieldsIndexMapping[f]
		if !ok {
			continue
		}
		out[i] = unsafeutils.GetWithOffset[string](&e, offset)
	}
	return out
}
